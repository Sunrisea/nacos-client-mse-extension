package com.alibaba.nacos.client.aliyun.auth.provider;

import com.alibaba.nacos.api.utils.StringUtils;
import com.alibaba.nacos.client.aliyun.auth.ExtensionAuthPropertyKey;
import com.alibaba.nacos.client.aliyun.auth.ExtensionRamContext;
import com.alibaba.nacos.common.lifecycle.Closeable;

import java.util.Properties;

/**
 * Aliyun CredentialsProvider for nacos extension plugin.
 *
 * @author xiweng.yy
 */
public interface ExtensionCredentialsProvider extends Closeable {
    
    /**
     * The properties are generated by {@link com.alibaba.nacos.client.env.NacosClientProperties}, which loaded from init Properties, JVM and Env.
     *
     * @param properties nacos client properties
     * @return {@code true} if match and will use this Credentials Provider, {@code false} otherwise.
     */
    boolean matchProvider(Properties properties);
    
    /**
     * Initialize the provider.
     *
     * @param properties nacos client properties which same as parameters {@link #matchProvider(Properties)}
     */
    void init(Properties properties);
    
    /**
     * Get Aliyun Credentials and transform to Nacos Credentials.
     *
     * @return Nacos Credentials as {@link ExtensionRamContext}
     */
    ExtensionRamContext getCredentialsForNacosClient();
    
    default String getNacosProperties(Properties properties, ExtensionAuthPropertyKey key) {
        String result = properties.getProperty(key.getKey());
        if (StringUtils.isEmpty(result)) {
            result = properties.getProperty(key.getEnvKey());
        }
        // For Adapt 2.1.X, in 2.1.X version, NacosClientProperties not finished all replaced, so properties don't include env.
        if (StringUtils.isEmpty(result)) {
            result = System.getenv(key.getEnvKey());
        }
        return result;
    }
    
    default String getSignatureRegionId(Properties properties) {
        return getNacosProperties(properties, ExtensionAuthPropertyKey.SIGNATURE_REGION_ID);
    }
}
